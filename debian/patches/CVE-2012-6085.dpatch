#! /bin/sh /usr/share/dpatch/dpatch-run
# Description: fix keyring corruption via malformed key import
# Origin: upstream, http://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=patch;h=f795a0d59e197455f8723c300eebf59e09853efa
# Bug: https://bugs.g10code.com/gnupg/issue1455
# Bug-Debian: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=697108

@DPATCH@
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' gnupg-1.4.11~/g10/import.c gnupg-1.4.11/g10/import.c
--- gnupg-1.4.11~/g10/import.c	2010-05-07 06:34:39.000000000 -0400
+++ gnupg-1.4.11/g10/import.c	2013-01-08 10:52:51.153224564 -0500
@@ -346,6 +346,27 @@
 }
 
 
+/* Return true if PKTTYPE is valid in a keyblock.  */
+static int
+valid_keyblock_packet (int pkttype)
+{
+  switch (pkttype)
+    {
+    case PKT_PUBLIC_KEY:
+    case PKT_PUBLIC_SUBKEY:
+    case PKT_SECRET_KEY:
+    case PKT_SECRET_SUBKEY:
+    case PKT_SIGNATURE:
+    case PKT_USER_ID:
+    case PKT_ATTRIBUTE:
+    case PKT_RING_TRUST:
+      return 1;
+    default:
+      return 0;
+    }
+}
+
+
 /****************
  * Read the next keyblock from stream A.
  * PENDING_PKT should be initialzed to NULL
@@ -423,7 +444,7 @@
 	    }
 	    in_cert = 1;
 	  default:
-	    if( in_cert ) {
+	    if (in_cert && valid_keyblock_packet (pkt->pkttype)) {
 		if( !root )
 		    root = new_kbnode( pkt );
 		else
